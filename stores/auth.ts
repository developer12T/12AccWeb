import { defineStore } from 'pinia'
import type { LoginResponse } from "~/types/User";
export const useAuthStore = defineStore('auth', {
  state: () => ({
    validateLogin: null as string | null,
    statusCode: 0,
    username: '',
    fullName: '',
    role: '',
    token: ''
  }),

  getters: {
    isLoggedIn: state => !!state.token
  },

  actions: {
    async login(userLogin: string, passwordLogin: string) {
      try {
        // ‚úÖ ‡πÉ‡∏ä‡πâ $fetch ‡πÅ‡∏ó‡∏ô axios
        const response = await $fetch<LoginResponse>('/api/cash/login', {
          baseURL: import.meta.env.VITE_API_URL, // üî∏ ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å .env
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-channel': 'cash'
          },
          body: {
            username: userLogin,
            password: passwordLogin
          }
        })

        // ‚úÖ response ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô object ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á .data)
        const result = response.data?.[0]
        console.log('result', result)

        if (result) {
          this.username = result.username
          this.fullName = result.fullName
          this.role = result.role
          this.token = result.token

          localStorage.setItem('username', this.username)
          localStorage.setItem('fullName', this.fullName)
          localStorage.setItem('role', this.role)
          localStorage.setItem('token', this.token)

          this.statusCode = response.status || 200
        } else {
          this.validateLogin = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
          this.logout()
        }

      } catch (error: any) {
        console.error('‚ùå login error:', error)
        this.validateLogin = error?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'
      }
    },

    logout() {
      this.username = ''
      this.fullName = ''
      this.role = ''
      this.token = ''
      localStorage.clear()
    }
  }
})
